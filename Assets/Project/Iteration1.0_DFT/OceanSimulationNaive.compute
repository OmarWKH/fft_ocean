#pragma kernel iDFTHTOneShot
#pragma kernel Evolve

#pragma enable_d3d11_debug_symbols

#define PI 3.1415926535897932384626433832795
#define g 9.81

RWTexture2D<float4> RT_ht;
RWTexture2D<float4> RT_iDFTHt;
RWTexture2D<float4> RT_VertexDisplacement;
RWTexture2D<float4> RT_Debug;
Texture2D<float4> noise_r0;
Texture2D<float4> noise_i0;
Texture2D<float4> noise_r1;
Texture2D<float4> noise_i1;
SamplerState linearClampSampler;
float4 Time;
uint N; // width/height
uint L; // horizontal dimension?
float A; // constant in P_h(k)
float2 w; // wind direction
int V; // wind speed

struct complex {
    float real;
    float imag;
};

complex mul(complex a, complex b) {
    complex result;
    result.real = a.real * b.real - a.imag * b.imag;
    result.imag = a.real * b.imag + a.imag * b.real;
    return result;
}

complex add(complex a, complex b) {
    complex result;
    result.real = a.real + b.real;
    result.imag = a.imag + b.imag;
    return result;
}

complex conjugate(complex a) {
    complex result;
    result.real = a.real;
    result.imag = -a.imag;
    return result;
}

// Box-Muller-Method, FJs thesis
float4 gaussRND(uint3 id)
{
    float2 texCoord = float2(id.xy) / float(N);
    float noise00 = clamp(noise_r0.SampleLevel(linearClampSampler, texCoord, 0).r, 0.001, 1.0); // already clamped by sampler?
    float noise01 = clamp(noise_i0.SampleLevel(linearClampSampler, texCoord, 0).r, 0.001, 1.0);
    float noise02 = clamp(noise_r1.SampleLevel(linearClampSampler, texCoord, 0).r, 0.001, 1.0);
    float noise03 = clamp(noise_i1.SampleLevel(linearClampSampler, texCoord, 0).r, 0.001, 1.0);
    float u0 = 2.0*PI*noise00;
    float v0 = sqrt(-2.0 * log(noise01));
    float u1 = 2.0*PI* noise02;
    float v1 = sqrt(-2.0 * log(noise03));
    float4 rnd = float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
    return rnd;
}

// Philips
float v2_sqrt_P_h_over_sqrt2(float2 k) {
    float k_mag = length(k);
    if (k_mag < 0.00001) k_mag = 0.00001; // suppress smaller waves?
    float k_mag_sq = k_mag * k_mag;
    float L_ = V * V / g; // largest wave at wind speed V
    float result = clamp(
        sqrt(
            (A/(k_mag_sq * k_mag_sq))
            * pow(dot(normalize(k), normalize(w)), 6.0)
            * exp(-(1.0/(k_mag_sq * L_ * L_)))
            * exp(-k_mag_sq*pow(L/2000.0,2.0))) / sqrt(2.0)
    , -4000, 4000);
    return result;
}

complex h_0(uint3 id, float spectrum)
{
    complex result;
    float4 random = gaussRND(id);
    result.real = random.x * spectrum;
    result.imag = random.y * spectrum;
    return result;
}

[numthreads(16,16,1)]
void Evolve(uint3 id : SV_DispatchThreadID) {
    float2 nm = id.xy - N / 2.0; // -N/2 <= n & m <= N/2
    float2 k = float2(2.0 * PI * nm.x / L, 2.0 * PI * nm.y / L); // wavevector
    float spectrum = v2_sqrt_P_h_over_sqrt2(k);
    complex h_0_k = h_0(id, spectrum);

    complex h_0_k_minus = h_0(id, v2_sqrt_P_h_over_sqrt2(-k));
    complex h_0_k_minus_conj = conjugate(h_0_k_minus);

    float k_mag = length(k);
    if (k_mag < 0.00001) k_mag = 0.00001;

    float w_k = sqrt(g * k_mag);
    float angle = w_k * Time.y;
    // RT_Debug[id.xy] = float4(h_0_k_minus_conj.real, h_0_k_minus_conj.imag, w_k, Time.y);
    
    complex first_term;
    first_term.real = cos(angle);
    first_term.imag = sin(angle);
    // RT_Debug[id.xy] = float4(h_0_k_minus_conj.real, h_0_k_minus_conj.imag, first_term.real, first_term.imag);
    
    complex second_term;
    second_term.real = first_term.real;
    second_term.imag = -first_term.imag;
    // RT_Debug[id.xy] = float4(first_term.real, first_term.imag, second_term.real, second_term.imag);

    first_term = mul(h_0_k, first_term);
    second_term = mul(h_0_k_minus_conj, second_term);
    // RT_Debug[id.xy] = float4(first_term.real, first_term.imag, second_term.real, second_term.imag);

    complex result = add(first_term, second_term);

    RT_ht[id.xy] = float4(result.real, result.imag, 0.0, 0.0);
    // RT_Debug[id.xy] = float4(RT_ht[id.xy].x, 0.0, 0.0, 0.0);
}

// real valued because of Hermitian symmetry?
complex iDFTOneShot(uint3 id, RWTexture2D<float4> inputTex)
{
    uint n = id.x;
    uint m = id.y;

    complex result;
    result.real = 0.0;
    result.imag = 0.0;

    for (uint k = 0; k < N; k++) {
        complex innerResult;
        innerResult.real = 0.0;
        innerResult.imag = 0.0;
        for (uint l = 0; l < N; l++) {
            float2 input = inputTex[uint2(k, l)].xy;
            complex complexInput;
            complexInput.real = input.x;
            complexInput.imag = input.y;
            float angle = ((2.0 * PI * k * float(n) - PI * N * n) / float(N)) + ((2.0 * PI * l * m - PI * N * m) / float(N));
            // float angle = 2.0 * PI * ((float(k) * n + float(l) * m) / float(N));
            complex phaser;
            phaser.real = cos(angle);
            phaser.imag = -sin(angle);
            innerResult = add(innerResult, mul(complexInput, phaser));
            // RT_Debug[id.xy] = float4(input.x, angle, phaser.real, innerResult.real);
        }
        result = add(result, innerResult);
    }
    // RT_Debug[id.xy] = float4(RT_Debug[id.xy].x, inputTex[id.xy].x, 0.0, 0.0);

    result.real = result.real / float(N * N);
    result.imag = result.imag / float(N * N);
    return result;
}

[numthreads(16,16,1)]
void iDFTHTOneShot(uint3 id : SV_DispatchThreadID)
{
    complex idft = iDFTOneShot(id, RT_ht);;
    RT_iDFTHt[id.xy] = float4(idft.real, idft.imag, 0.0, 0.0);
    RT_VertexDisplacement[id.xy] = float4(0.0, RT_iDFTHt[id.xy].x, 0.0, 0.0);
}

// not used, incorrect
float sqrt_P_h_over_sqrt2(float2 k) {
    float k_mag = length(k);
    float l = 0.00001; // not the same l?
    if (k_mag < 0.00001) k_mag = 0.00001; // suppress smaller waves?
    float k_mag_sq = k_mag * k_mag;
    float L_ = V * V / g; // largest wave at wind speed V
    float result =  sqrt(A / (k_mag_sq * k_mag_sq)) // clamp?
                    * sqrt(exp(-1.0 / (k_mag_sq * L * L)))
                    * length(dot(normalize(k), normalize(w))) // ^6?
                    * sqrt(exp(-1.0 * k_mag_sq * l * l));
    return result / sqrt(2.0);
}